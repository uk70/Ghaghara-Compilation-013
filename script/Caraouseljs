// WOMEN //
const initWomenSlider = ()=>{
    const skimage = document.querySelector(".sk-caraousel .sk-cimage")
    const slideButtons = document.querySelectorAll(".sk-caraousel .slide-button")
    const sliderScrollbar = document.querySelector(".caraousel-container .slider-scrollbar")
    const scrollbarThumb =sliderScrollbar.querySelector(".scrollbar-thumb");
    const maxScrollLeft = skimage.scrollWidth - skimage.clientWidth;

    scrollbarThumb.addEventListener("mousedown", (e)=>{
        const startX = e.clientX;
        const thumbPosition = scrollbarThumb.offsetLeft;

        const handleMouseMove = (e) =>{
            const deltaX = e.clientX - startX;
            const newThumbPosition = thumbPosition + deltaX;
            const maxThumbPosition = sliderScrollbar.getBoundingClientRect().width - scrollbarThumb.offsetWidth;

            const boundedPosition = Math.max(0, Math.min(maxThumbPosition, newThumbPosition));
            const scrollPosition = (boundedPosition / maxThumbPosition) * maxScrollLeft;
            
            scrollbarThumb.style.left = `${boundedPosition}px`;
            skimage.scrollLeft = scrollPosition;
            
        }

        const handleMouseUp = () =>{
            document.removeEventListener("mousemove", handleMouseMove);
            document.removeEventListener("mouseup", handleMouseUp);
        }

        document.addEventListener("mousemove", handleMouseMove);
        document.addEventListener("mouseup", handleMouseUp);

    })

    slideButtons.forEach(button =>{
        button.addEventListener("click", () =>{
            const direction = button.id === "prev-slide" ? -1 : 1;
            const scrollAmount = skimage.clientWidth * direction;
            skimage.scrollBy({left:scrollAmount, behavior:"smooth"})

        })
    })

    const handleSlideButtons = ()=>{
        slideButtons[0].style.display = skimage.scrollLeft <= 0 ? "none" : "block";
        slideButtons[1].style.display = skimage.scrollLeft >= maxScrollLeft ? "none" : "block";
    }

    const updateSrollThumbPosition = () =>{
        const scrollPosition = skimage.scrollLeft
        const thumbPosition = (scrollPosition / maxScrollLeft) * (sliderScrollbar.clientWidth - scrollbarThumb.offsetWidth);
        scrollbarThumb.style.left = `${thumbPosition}px`
    }

    skimage.addEventListener("scroll", ()=>{
        handleSlideButtons();
        updateSrollThumbPosition();
    })
}
window.addEventListener("load", initWomenSlider);

// WOMEN END //

// MEN //
const initMenSlider = () => {
    const skimage = document.querySelector(".sk-caraousel-men .sk-cimage");
    const slideButtons = document.querySelectorAll(".sk-caraousel-men .slide-button");
    const sliderScrollbar = document.querySelector(".caraousel-container-men .slider-scrollbar-men");
    const scrollbarThumb = sliderScrollbar.querySelector(".scrollbar-thumb-men");
    const maxScrollLeft = skimage.scrollWidth - skimage.clientWidth;

    scrollbarThumb.addEventListener("mousedown", (e) => {
        const startX = e.clientX;
        const thumbPosition = scrollbarThumb.offsetLeft;

        const handleMouseMove = (e) => {
            const deltaX = e.clientX - startX;
            const newThumbPosition = thumbPosition + deltaX;
            const maxThumbPosition = sliderScrollbar.getBoundingClientRect().width - scrollbarThumb.offsetWidth;

            const boundedPosition = Math.max(0, Math.min(maxThumbPosition, newThumbPosition));
            const scrollPosition = (boundedPosition / maxThumbPosition) * maxScrollLeft;

            scrollbarThumb.style.left = `${boundedPosition}px`;
            skimage.scrollLeft = scrollPosition;

        };

        const handleMouseUp = () => {
            document.removeEventListener("mousemove", handleMouseMove);
            document.removeEventListener("mouseup", handleMouseUp);
        };

        document.addEventListener("mousemove", handleMouseMove);
        document.addEventListener("mouseup", handleMouseUp);

    });

    slideButtons.forEach(button => {
        button.addEventListener("click", () => {
            const direction = button.id === "prev-slide-men" ? -1 : 1;
            const scrollAmount = skimage.clientWidth * direction;
            skimage.scrollBy({ left: scrollAmount, behavior: "smooth" });

        });
    });

    const handleSlideButtons = () => {
        slideButtons[0].style.display = skimage.scrollLeft <= 0 ? "none" : "block";
        slideButtons[1].style.display = skimage.scrollLeft >= maxScrollLeft ? "none" : "block";
    };

    const updateSrollThumbPosition = () => {
        const scrollPosition = skimage.scrollLeft;
        const thumbPosition = (scrollPosition / maxScrollLeft) * (sliderScrollbar.clientWidth - scrollbarThumb.offsetWidth);
        scrollbarThumb.style.left = `${thumbPosition}px`;
    };

    skimage.addEventListener("scroll", () => {
        handleSlideButtons();
        updateSrollThumbPosition();
    });
};

window.addEventListener("load", initMenSlider);

// MEN END //

// SANSPREET CARAOUSEL START

const carousel = document.querySelector(".carousel"),
firstImg = carousel.querySelectorAll("img")[0],
arrowIcons = document.querySelectorAll(".wrapper i");

let isDragStart = false, isDragging = false, prevPageX, prevScrollLeft, positionDiff;

const showHideIcons = () => {
    let scrollWidth = carousel.scrollWidth - carousel.clientWidth; 
    arrowIcons[0].style.display = carousel.scrollLeft == 0 ? "none" : "block";
    arrowIcons[1].style.display = carousel.scrollLeft == scrollWidth ? "none" : "block";
}

arrowIcons.forEach(icon => {
    icon.addEventListener("click", () => {
        let firstImgWidth = firstImg.clientWidth + 14; 
        carousel.scrollLeft += icon.id == "left" ? -firstImgWidth : firstImgWidth;
        setTimeout(() => showHideIcons(), 60);
    });
});

const autoSlide = () => {
    if(carousel.scrollLeft - (carousel.scrollWidth - carousel.clientWidth) > -1 || carousel.scrollLeft <= 0) return;

    positionDiff = Math.abs(positionDiff);
    let firstImgWidth = firstImg.clientWidth + 14;
    let valDifference = firstImgWidth - positionDiff;

    if(carousel.scrollLeft > prevScrollLeft) { 
        return carousel.scrollLeft += positionDiff > firstImgWidth / 5 ? valDifference : -positionDiff;
    }
    carousel.scrollLeft -= positionDiff > firstImgWidth / 5 ? valDifference : -positionDiff;
}

const dragStart = (e) => {
    isDragStart = true;
    prevPageX = e.pageX || e.touches[0].pageX;
    prevScrollLeft = carousel.scrollLeft;
}

const dragging = (e) => {
    if(!isDragStart) return;
    e.preventDefault();
    isDragging = true;
    carousel.classList.add("dragging");
    positionDiff = (e.pageX || e.touches[0].pageX) - prevPageX;
    carousel.scrollLeft = prevScrollLeft - positionDiff;
    showHideIcons();
}

const dragStop = () => {
    isDragStart = false;
    carousel.classList.remove("dragging");

    if(!isDragging) return;
    isDragging = false;
    autoSlide();
}

carousel.addEventListener("mousedown", dragStart);
carousel.addEventListener("touchstart", dragStart);

document.addEventListener("mousemove", dragging);
carousel.addEventListener("touchmove", dragging);

document.addEventListener("mouseup", dragStop);
carousel.addEventListener("touchend", dragStop);


// SANSPREET CARAOUSEL END